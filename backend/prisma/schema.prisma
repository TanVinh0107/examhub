generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}


datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum ExamStatus {
  PENDING
  APPROVED
  REJECTED
}

model User {
  id           String  @id @default(cuid())
  email        String  @unique
  passwordHash String?
  name         String?
  role         Role    @default(USER)
  provider     String?
  providerId   String?
  exams        Exam[]
  currentRefreshToken String? 

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model School {
  id          String       @id @default(cuid())
  name        String
  slug        String       @unique
  departments Department[]
  exams       Exam[] // üëà Quan h·ªá ng∆∞·ª£c v·ªõi Exam.school
}

model Department {
  id       String    @id @default(cuid())
  name     String
  slug     String    @unique
  school   School    @relation(fields: [schoolId], references: [id])
  schoolId String
  subjects Subject[]
  exams    Exam[] // üëà Quan h·ªá ng∆∞·ª£c v·ªõi Exam.department
}

model Subject {
  id           String     @id @default(cuid())
  name         String
  code         String?
  slug         String     @unique
  department   Department @relation(fields: [departmentId], references: [id])
  departmentId String
  exams        Exam[] // üëà Quan h·ªá ng∆∞·ª£c v·ªõi Exam.subject
}

model Exam {
  id           String     @id @default(cuid())
  title        String @default("Untitled")                             // T√™n ƒë·ªÅ thi
  year         Int
  credits      Int?
  durationMin  Int?
  fileUrl      String
  fileType     String
  thumbnailUrl String?
  description  String?
  status       ExamStatus @default(PENDING)
  views        Int        @default(0)

  schoolId     String
  departmentId String
  subjectId    String
  uploaderId   String?

  school       School     @relation(fields: [schoolId], references: [id])
  department   Department @relation(fields: [departmentId], references: [id])
  subject      Subject    @relation(fields: [subjectId], references: [id])
  uploader     User?      @relation(fields: [uploaderId], references: [id])
  viewsHistory ExamView[]

  // Soft delete
  deletedAt    DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([status, year])        // index ƒë·ªÉ filter nhanh theo status & nƒÉm
  @@index([schoolId, departmentId, subjectId])
}


model ExamView {
  id        String   @id @default(cuid())
  examId    String
  exam      Exam     @relation(fields: [examId], references: [id])
  ip        String?
  userId    String?
  createdAt DateTime @default(now())
}

model RevokedToken {
  token     String   @id         // üëà ƒê·∫∑t l√†m kh√≥a ch√≠nh
  userId    String?
  createdAt DateTime @default(now())
}

