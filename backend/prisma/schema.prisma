generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}



// ‚úÖ Database PostgreSQL
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ====================================
// üë§ USER
// ====================================
model User {
  id                  String         @id @default(cuid())
  email               String         @unique
  passwordHash        String?
  name                String?
  role                Role           @default(USER)
  provider            String?
  providerId          String?
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  currentRefreshToken String?

  exams          Exam[]
  revokedTokens  RevokedToken[]      // ‚úÖ Quan h·ªá ng∆∞·ª£c v·ªõi RevokedToken
}

// ====================================
// üè´ SCHOOL / DEPARTMENT / SUBJECT
// ====================================
model School {
  id          String       @id @default(cuid())
  name        String
  slug        String       @unique
  departments Department[]
  exams       Exam[]
}

model Department {
  id       String    @id @default(cuid())
  name     String
  slug     String    @unique
  schoolId String
  school   School    @relation(fields: [schoolId], references: [id])
  exams    Exam[]
  subjects Subject[]
}

model Subject {
  id           String     @id @default(cuid())
  name         String
  code         String?
  slug         String     @unique
  departmentId String
  exams        Exam[]
  department   Department @relation(fields: [departmentId], references: [id])
}

// ====================================
// üìÑ EXAM
// ====================================
model Exam {
  id           String     @id @default(cuid())
  title        String     @default("Untitled")
  year         Int
  credits      Int?
  durationMin  Int?
  fileUrl      String
  fileType     String
  thumbnailUrl String?
  description  String?
  status       ExamStatus @default(PENDING)
  views        Int        @default(0)

  schoolId     String
  departmentId String
  subjectId    String
  uploaderId   String?

  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  deletedAt    DateTime?

  school       School     @relation(fields: [schoolId], references: [id])
  department   Department @relation(fields: [departmentId], references: [id])
  subject      Subject    @relation(fields: [subjectId], references: [id])
  uploader     User?      @relation(fields: [uploaderId], references: [id])
  viewsHistory ExamView[]

  @@index([status, year])
  @@index([schoolId, departmentId, subjectId])
}

// ====================================
// üëÅÔ∏è EXAM VIEW
// ====================================
model ExamView {
  id        String   @id @default(cuid())
  examId    String
  ip        String?
  userId    String?
  createdAt DateTime @default(now())
  exam      Exam     @relation(fields: [examId], references: [id])
}

// ====================================
// üîí REVOKED TOKEN
// ====================================
model RevokedToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

// ====================================
// ENUMS
// ====================================
enum Role {
  USER
  ADMIN
}

enum ExamStatus {
  PENDING
  APPROVED
  REJECTED
}
